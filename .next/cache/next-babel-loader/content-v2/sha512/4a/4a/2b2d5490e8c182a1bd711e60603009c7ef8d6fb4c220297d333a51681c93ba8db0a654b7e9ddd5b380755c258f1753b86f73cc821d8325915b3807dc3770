{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nvar useScroll = function useScroll() {\n  _s();\n\n  var _useState = useState(0),\n      lastScrollTop = _useState[0],\n      setLastScrollTop = _useState[1];\n\n  var _useState2 = useState({}),\n      bodyOffset = _useState2[0],\n      setBodyOffset = _useState2[1];\n\n  var _useState3 = useState(bodyOffset.top),\n      scrollY = _useState3[0],\n      setScrollY = _useState3[1];\n\n  var _useState4 = useState(bodyOffset.left),\n      scrollX = _useState4[0],\n      setScrollX = _useState4[1];\n\n  var _useState5 = useState(),\n      scrollDirection = _useState5[0],\n      setScrollDirection = _useState5[1];\n\n  var _useState6 = useState({}),\n      windowSize = _useState6[0],\n      setWindowSize = _useState6[1];\n\n  var listener = function listener(e) {\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n    setBodyOffset(document.body.getBoundingClientRect());\n    setScrollY(-bodyOffset.top);\n    setScrollX(bodyOffset.left);\n    setScrollDirection(lastScrollTop > -bodyOffset.top ? 'down' : 'up');\n    setLastScrollTop(-bodyOffset.top);\n  };\n\n  useEffect(function () {\n    setWindowSize({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n    setBodyOffset(document.body.getBoundingClientRect());\n    window.addEventListener('scroll', listener);\n    return function () {\n      window.removeEventListener('scroll', listener);\n    };\n  });\n  return {\n    scrollY: scrollY,\n    scrollX: scrollX,\n    scrollDirection: scrollDirection,\n    window: window\n  };\n};\n\n_s(useScroll, \"fSVqCVwQefTMtYdeH2nV+7ihYFA=\");\n\nexport default useScroll;","map":{"version":3,"sources":["/Users/chunhonglau/david/hungteam-web/src/hooks/useScroll.js"],"names":["useState","useEffect","useScroll","lastScrollTop","setLastScrollTop","bodyOffset","setBodyOffset","top","scrollY","setScrollY","left","scrollX","setScrollX","scrollDirection","setScrollDirection","windowSize","setWindowSize","listener","e","height","window","innerHeight","width","innerWidth","document","body","getBoundingClientRect","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACsBF,QAAQ,CAAC,CAAD,CAD9B;AAAA,MACbG,aADa;AAAA,MACEC,gBADF;;AAAA,mBAEgBJ,QAAQ,CAAC,EAAD,CAFxB;AAAA,MAEbK,UAFa;AAAA,MAEDC,aAFC;;AAAA,mBAGUN,QAAQ,CAACK,UAAU,CAACE,GAAZ,CAHlB;AAAA,MAGbC,OAHa;AAAA,MAGJC,UAHI;;AAAA,mBAIUT,QAAQ,CAACK,UAAU,CAACK,IAAZ,CAJlB;AAAA,MAIbC,OAJa;AAAA,MAIJC,UAJI;;AAAA,mBAK0BZ,QAAQ,EALlC;AAAA,MAKba,eALa;AAAA,MAKIC,kBALJ;;AAAA,mBAMgBd,QAAQ,CAAC,EAAD,CANxB;AAAA,MAMbe,UANa;AAAA,MAMDC,aANC;;AAQpB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AACpBF,IAAAA,aAAa,CAAC;AAACG,MAAAA,MAAM,EAAEC,MAAM,CAACC,WAAhB;AAA6BC,MAAAA,KAAK,EAAEF,MAAM,CAACG;AAA3C,KAAD,CAAb;AACAjB,IAAAA,aAAa,CAACkB,QAAQ,CAACC,IAAT,CAAcC,qBAAd,EAAD,CAAb;AACAjB,IAAAA,UAAU,CAAC,CAACJ,UAAU,CAACE,GAAb,CAAV;AACAK,IAAAA,UAAU,CAACP,UAAU,CAACK,IAAZ,CAAV;AACAI,IAAAA,kBAAkB,CAACX,aAAa,GAAG,CAACE,UAAU,CAACE,GAA5B,GAAkC,MAAlC,GAA2C,IAA5C,CAAlB;AACAH,IAAAA,gBAAgB,CAAC,CAACC,UAAU,CAACE,GAAb,CAAhB;AACH,GAPD;;AASAN,EAAAA,SAAS,CAAC,YAAM;AACZe,IAAAA,aAAa,CAAC;AAAEG,MAAAA,MAAM,EAAEC,MAAM,CAACC,WAAjB;AAA8BC,MAAAA,KAAK,EAAEF,MAAM,CAACG;AAA5C,KAAD,CAAb;AACAjB,IAAAA,aAAa,CAACkB,QAAQ,CAACC,IAAT,CAAcC,qBAAd,EAAD,CAAb;AACAN,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCV,QAAlC;AACA,WAAO,YAAM;AACTG,MAAAA,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC;AACH,KAFD;AAGH,GAPQ,CAAT;AASA,SAAO;AACHT,IAAAA,OAAO,EAAPA,OADG;AAEHG,IAAAA,OAAO,EAAPA,OAFG;AAGHE,IAAAA,eAAe,EAAfA,eAHG;AAIHO,IAAAA,MAAM,EAANA;AAJG,GAAP;AAMH,CAhCD;;GAAMlB,S;;AAkCN,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useScroll = () => {\n    const [lastScrollTop, setLastScrollTop] = useState(0);\n    const [bodyOffset, setBodyOffset] = useState({});\n    const [scrollY, setScrollY] = useState(bodyOffset.top);\n    const [scrollX, setScrollX] = useState(bodyOffset.left);\n    const [scrollDirection, setScrollDirection] = useState();\n    const [windowSize, setWindowSize] = useState({})\n\n    const listener = (e) => {\n        setWindowSize({height: window.innerHeight, width: window.innerWidth});\n        setBodyOffset(document.body.getBoundingClientRect());\n        setScrollY(-bodyOffset.top);\n        setScrollX(bodyOffset.left);\n        setScrollDirection(lastScrollTop > -bodyOffset.top ? 'down' : 'up');\n        setLastScrollTop(-bodyOffset.top);\n    };\n\n    useEffect(() => {\n        setWindowSize({ height: window.innerHeight, width: window.innerWidth });\n        setBodyOffset(document.body.getBoundingClientRect());\n        window.addEventListener('scroll', listener);\n        return () => {\n            window.removeEventListener('scroll', listener);\n        };\n    });\n\n    return {\n        scrollY,\n        scrollX,\n        scrollDirection,\n        window,\n    };\n};\n\nexport default useScroll;\n"]},"metadata":{},"sourceType":"module"}